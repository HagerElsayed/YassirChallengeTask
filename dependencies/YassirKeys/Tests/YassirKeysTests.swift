// DO NOT MODIFY
// Automatically generated by Arkana (https://github.com/rogerluan/arkana)

import Foundation
import YassirKeysInterfaces
import XCTest
@testable import YassirKeys

final class KeysTests: XCTestCase {
    private var salt: [UInt8]!
    private var globalSecrets: KeysGlobalProtocol!

    override func setUp() {
        super.setUp()
        salt = [
            0xd8, 0x1d, 0x4f, 0xf6, 0x97, 0x7e, 0x41, 0xa3, 0x4, 0xf, 0x7d, 0x6, 0x4e, 0x37, 0x1e, 0x1c, 0x36, 0x55, 0x24, 0x72, 0xf6, 0x13, 0x36, 0x96, 0xb1, 0x52, 0x1d, 0xa, 0x1a, 0x64, 0xce, 0xb6, 0x93, 0xe8, 0xa6, 0x46, 0xb3, 0xeb, 0xd0, 0xe3, 0x40, 0xcc, 0xb0, 0xd6, 0xd5, 0x5a, 0x32, 0x66, 0xe7, 0x54, 0x2b, 0x83, 0x6b, 0xd2, 0x45, 0x72, 0xcd, 0x8e, 0xd6, 0xed, 0x59, 0x48, 0x88, 0xb7
        ]
        globalSecrets = Keys.Global()
    }

    override func tearDown() {
        globalSecrets = nil
        salt = nil
        super.tearDown()
    }

    func test_decodeRandomHexKey_shouldDecode() {
        let encoded: [UInt8] = [
            0xe1, 0x79, 0x2d, 0xc4, 0xa3, 0x4c, 0x76, 0xc0, 0x36, 0x6e, 0x19, 0x3e, 0x7e, 0xe, 0x2b, 0x2f, 0x55, 0x33, 0x16, 0x13, 0x90, 0x76, 0x2, 0xa5, 0x89, 0x62, 0x25, 0x68, 0x7b, 0x1, 0xfb, 0x80, 0xa3, 0xda, 0x93, 0x24, 0xd0, 0x88, 0xe7, 0x80, 0x78, 0xff, 0xd5, 0xe0, 0xb7, 0x63, 0x57, 0x2, 0xd6, 0x63, 0x1f, 0xba, 0xd, 0xea, 0x72, 0x11, 0xab, 0xb8, 0xb5, 0xda, 0x60, 0x7d, 0xbc, 0xd5, 0xef, 0x2e, 0x77, 0x95, 0xa0, 0x46, 0x22, 0x9b, 0x61, 0x36, 0x4d, 0x67, 0x28, 0xf, 0x7c, 0x2d, 0x7, 0x33, 0x41, 0x42, 0xc1, 0x70, 0x4, 0xf7, 0x81, 0x33, 0x79, 0x3d, 0x7b, 0x51, 0xfd, 0xd5, 0xf6, 0xdf, 0xc0, 0x72, 0x8b, 0xd9, 0xe0, 0xda, 0x24, 0xa8, 0xd2, 0xb0, 0xed, 0x3e, 0, 0x50, 0x83, 0x61, 0x1a, 0xe5, 0x5b, 0xe5, 0x77, 0x4a, 0xae, 0xbf, 0xb0, 0xdf, 0x3d, 0x2a, 0xba, 0x86
        ]
        XCTAssertEqual(Keys.decode(encoded: encoded, cipher: salt), "9db2427c2ad80953cf2afe43808bae56025bcc7c83e6b9ed1749f87cf6c7954b738c78c8e90af8b11fe07c2a0ad7a53ce7f48209ddbf8d26d51f0728c1f2db21")
    }

    func test_decodeRandomBase64Key_shouldDecode() {
        let encoded: [UInt8] = [
            0x90, 0x2b, 0x77, 0xa2, 0xfc, 0x3f, 0x72, 0xf4, 0x67, 0x7f, 0x17, 0x77, 0x19, 0x1c, 0x52, 0x74, 0x63, 0x22, 0x1c, 0x3a, 0xc3, 0x67, 0x57, 0xc6, 0xf4, 0, 0x4d, 0x5a, 0x6f, 0x2e, 0x8f, 0xec, 0xc4, 0x8d, 0xc0, 0x14, 0xd1, 0xdd, 0xa2, 0x93, 0xd, 0x9b, 0xc4, 0x82, 0xa3, 0x1e, 0x41, 0xc, 0xb4, 0x16, 0x4a, 0xb6, 0x20, 0xe5, 0x35, 0x8, 0x83, 0xff, 0xef, 0x85, 0x16, 0x70, 0xe1, 0xe1, 0x9b, 0x79, 0x39, 0xb8, 0xf3, 0x3d, 0x29, 0xf4, 0x45, 0x4a, 0x4d, 0x60, 0x22, 0x61, 0x5f, 0x57, 0x50, 0x20, 0x6d, 0x19, 0xbc, 0x64, 0xb, 0xab
        ]
        XCTAssertEqual(Keys.decode(encoded: encoded, cipher: salt), "H68TkA3WcpjqW+LhUw8H5taPERPPuJAZWefRb6rpMWtTvDsjSBa5K7pzNq9hO8iVCdvNdChWAE0flVAKfuIkJw==")
    }

    func test_decodeUUIDKey_shouldDecode() {
        let encoded: [UInt8] = [
            0xbd, 0x79, 0x7c, 0xc1, 0xa2, 0x1f, 0x20, 0x97, 0x29, 0x3e, 0x4f, 0x37, 0x2c, 0x1a, 0x2a, 0x28, 0xe, 0x62, 0x9, 0x4a, 0xc1, 0x2b, 0x55, 0xbb, 0x82, 0x65, 0x24, 0x68, 0x7c, 0x52, 0xfb, 0xd4, 0xa1, 0x8c, 0xc5, 0x7e
        ]
        XCTAssertEqual(Keys.decode(encoded: encoded, cipher: salt), "ed375aa4-121b-4487-878c-379bf65b2dc8")
    }

    func test_decodeTrueBoolValue_shouldDecode() {
        let encoded: [UInt8] = [
            0xac, 0x6f, 0x3a, 0x93
        ]
        XCTAssertTrue(Keys.decode(encoded: encoded, cipher: salt))
    }

    func test_decodeFalseBoolValue_shouldDecode() {
        let encoded: [UInt8] = [
            0xbe, 0x7c, 0x23, 0x85, 0xf2
        ]
        XCTAssertFalse(Keys.decode(encoded: encoded, cipher: salt))
    }

    func test_decodeIntValue_shouldDecode() {
        let encoded: [UInt8] = [
            0xec, 0x2f
        ]
        XCTAssertEqual(Keys.decode(encoded: encoded, cipher: salt), 42)
    }

    func test_encodeAndDecodeValueWithDollarSign_shouldDecode() {
        let encoded: [UInt8] = [
            0xaa, 0x78, 0x2e, 0x9a, 0xc8, 0x5a, 0x2d, 0xca, 0x69, 0x50, 0xe, 0x6e, 0x2f, 0x53, 0x67
        ]
        XCTAssertEqual(Keys.decode(encoded: encoded, cipher: salt), "real_$lim_shady")
    }
}

// DO NOT MODIFY
// Automatically generated by Arkana (https://github.com/rogerluan/arkana)

import Foundation
import YassirKeysInterfaces

public enum Keys {
    @inline(__always)
    fileprivate static let salt: [UInt8] = [
        0xd8, 0x1d, 0x4f, 0xf6, 0x97, 0x7e, 0x41, 0xa3, 0x4, 0xf, 0x7d, 0x6, 0x4e, 0x37, 0x1e, 0x1c, 0x36, 0x55, 0x24, 0x72, 0xf6, 0x13, 0x36, 0x96, 0xb1, 0x52, 0x1d, 0xa, 0x1a, 0x64, 0xce, 0xb6, 0x93, 0xe8, 0xa6, 0x46, 0xb3, 0xeb, 0xd0, 0xe3, 0x40, 0xcc, 0xb0, 0xd6, 0xd5, 0x5a, 0x32, 0x66, 0xe7, 0x54, 0x2b, 0x83, 0x6b, 0xd2, 0x45, 0x72, 0xcd, 0x8e, 0xd6, 0xed, 0x59, 0x48, 0x88, 0xb7
    ]

    static func decode(encoded: [UInt8], cipher: [UInt8]) -> String {
        return String(decoding: encoded.enumerated().map { offset, element in
            element ^ cipher[offset % cipher.count]
        }, as: UTF8.self)
    }

    static func decode(encoded: [UInt8], cipher: [UInt8]) -> Bool {
        let stringValue: String = Self.decode(encoded: encoded, cipher: cipher)
        return Bool(stringValue)!
    }

    static func decode(encoded: [UInt8], cipher: [UInt8]) -> Int {
        let stringValue: String = Self.decode(encoded: encoded, cipher: cipher)
        return Int(stringValue)!
    }
}

public extension Keys {
    struct Global: KeysGlobalProtocol {
        public init() {}

        @inline(__always)
        public let movieApiKey: String = {
            let encoded: [UInt8] = [
                0xbb, 0x24, 0x77, 0xc3, 0xa1, 0x1a, 0x71, 0xc0, 0x66, 0x3a, 0x4a, 0x65, 0x7d, 0x51, 0x2f, 0x28, 0x54, 0x33, 0x13, 0x47, 0x94, 0x77, 0x55, 0xa0, 0xd2, 0x62, 0x2b, 0x39, 0x78, 0x5c, 0xa8, 0x85
            ]
            return Keys.decode(encoded: encoded, cipher: Keys.salt)
        }()
    }
}

